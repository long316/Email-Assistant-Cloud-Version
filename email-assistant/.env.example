# Email Assistant â€“ Container Deployment .env (service-specific)
# Copy to email-assistant/.env and adjust for your environment.

# === Core auth and runtime ===
AUTH_FLOW=web
API_KEY=your_api_key_here

# === Database (use an isolated DB/schema) ===
# Example (MySQL in same docker network):
# DATABASE_URL=mysql+pymysql://user:password@mysql:3306/email_assistant?charset=utf8mb4
# Example (external MySQL):
# DATABASE_URL=mysql+pymysql://user:password@db.example.com:3306/email_assistant?charset=utf8mb4
DATABASE_URL=

# === Files root inside container (mounted by compose) ===
FILES_ROOT=/data/files

# === Google OAuth credentials (mounted read-only by compose) ===
GOOGLE_OAUTH_CLIENT_JSON=/secrets/credentials.json

# === OAuth redirect (must match GCP console, includes path prefix) ===
# Replace your-domain.com with your real domain
OAUTH_REDIRECT_URL=https://your-domain.com/email-assistant/oauth/google/callback

# === Optional security controls for return_url ===
# Comma-separated allowed hosts for return_url (exact host or suffix starting with a dot)
# e.g. crm.example.com,admin.example.com or .example.com
ALLOWED_RETURN_URL_HOSTS=your-domain.com
# Fallback redirect when return_url is missing/invalid (optional)
DEFAULT_RETURN_URL=
# In production, keep this false
ALLOW_DEV_LOCALHOST=false

# Notes:
# - This file is read by the email_assistant service via docker-compose env_file.
# - Secrets (DB user/password, API_KEY) should be set per environment and not committed.
# - FILES_ROOT and GOOGLE_OAUTH_CLIENT_JSON paths must match the volume mounts in docker-compose.yml.
